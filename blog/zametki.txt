#Для совместной работы над проектом, следует создать отдельный файл в ктором будет хранится версии установленных библиотек.
# pip freeze > requirements.txt - создать файл библиотек.
# pip instal -r requirements.txt -- это у нас установка библиотек.
#

Создание формы. 
    создается файл в приложении "forms.py"
    импортируется модуль  from django import forms
    создаётся новый класс формы class ИмяклассаForm(forms.ModelForm): 
        ModelForm ---> говорит о том что форма получит доступ к указанной моделе.
    переопределяем переменные с помощью класса Meta
    импортируем форму в views. 
        from .forms import ..........


Удаление коментариев... 
    сложности с логикой...что должно происходить с коментарием когда нажимается кнопка... невнимательность к выводу ошибки...ДУМАТЬ!!!




Тааак, внимательнее относиться к заданию а не делать что хочешь !!!
    Вывести посты на главную страницу.
    убрать Hello  с главной страницы. 
    детализация поста на второй а не на 3-й
    



Конекст процессор. 
    https://dzen.ru/a/ZPh1QlVT6xqSbiCt
        Контекстные процессоры - это функции, которые позволяют добавлять определенные данные в контекст каждого шаблона.
        Они используются, когда нужно сделать некоторые данные доступными на всех страницах сайта.


Пагинация.
    https://djangodoc.ru/3.2/topics/pagination/
        Django предоставляет высокоуровневые и низкоуровневые способы управления данными, разбитыми на страницы,
        то есть данными, которые разделены на несколько страниц со ссылками «Предыдущий / Следующий».
        Под капотом все методы разбивки на страницы используют этот Paginatorкласс. 
        Он делает всю тяжелую работу по фактическому разбиению QuerySetна Page объекты.



создание Log-in функции.
    https://pocoz.gitbooks.io/django-v-primerah/content/glava-4-sozdanie-social-website/ispolzovanie-django-authentication-framework/sozdanie-log-in-view.html


Регистрация нового прользователя.
Иефрпмация взята из источника "https://pocoz.gitbooks.io/django-v-primerah/content/glava-4-sozdanie-social-website/registratsiya-polzovatelei-i-profili-polzovatelei/registratsiya-polzovatelei.html"

Форма регистрации пользователя. 
    cleaned_data: GPT
        Использование cleaned_data в формах Django позволяет получить доступ к данным, которые прошли процесс очистки и валидации. Это важно, потому что:
        Очистка данных: В процессе отправки формы данные, введенные пользователем, могут содержать нежелательные символы или форматирование. Метод cleaned_data автоматически применяет методы очистки, определенные в форме, чтобы убедиться, что данные соответствуют ожидаемому формату.
        Валидация данных: После очистки данные проверяются на соответствие заданным правилам валидации. Если данные не соответствуют этим правилам, генерируется исключение ValidationError. Для получения доступа к данным, прошедшим валидацию, используется cleaned_data.
        Безопасность: Использование cleaned_data помогает предотвратить уязвимости в безопасности, связанные с вводом данных пользователем. Оно обеспечивает надежную проверку данных перед их использованием в приложении.
        Таким образом, использование cleaned_data является важным шагом для обработки данных из формы в Django и помогает создать безопасные и функциональные веб-приложения.